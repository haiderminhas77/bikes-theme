{% comment %}

    DS-Parallax.liquid: Renders Dynamic Parallax Section for image manipulation.
    This section requires both GSAP Core and GSAP Scroll Trigger turned on in the theme settings.
    Various Options are available in CMS and are assigned to dataset attributes
    of custom parallax-container element that's defined in below javascript tags
    due to a dependency on the GSAP library and ScrollTrigger plug in.

{% endcomment %}

{% javascript %}
class ParallaxContainer extends HTMLElement {
	constructor(){
		super()
		this.scaling = this.dataset.scale;
		
		this.xDirection = this.dataset.xDirection;
		this.yDirection = this.dataset.yDirection;
		this.translateX = this.xDirection == 'leftToRight' ? this.dataset.translateX : '-' + this.dataset.translateX;
		this.translateY = this.yDirection == 'topToBottom' ? this.dataset.translateY : '-' + this.dataset.translateY;
        this.uniqueId = this.getAttribute('id');
        this.parallaxAnimation;
        this.parallaxOptions = {
            mobileBreakpoint: '(max-width: 749px)',
            desktopBreakpoint: '(min-width: 750px)',
            mobileSelector:  `#${this.uniqueId} .parallax__image--mobile`,
            desktopSelector:  `#${this.uniqueId} .parallax__image--desktop`,
            parallaxContainer: `#${this.uniqueId}.parallax__container`,
            scaling: this.scaling,
            translateY: this.translateY,
            trnaslateX: this.translateX
        }
        this.handleResponsiveSetUp(this.parallaxOptions);
        window.addEventListener('resize', () => {
		    this.handleResponsiveSetUp(this.parallaxOptions);
        });
	}


	handleResponsiveSetUp(options){
        if(window.innerWidth < 750){
            this.setUpParallax(options.mobileBreakpoint, options.mobileSelector, options.parallaxContainer, options.scaling, options.translateY, options.translateX);
        } else {
            this.setUpParallax(options.desktopBreakpoint, options.desktopSelector, options.parallaxContainer, options.scaling, options.translateY, options.translateX);
        }
	}


	setUpParallax(breakpoint, targetSelector, triggerSelector, scale, yScroll, xScroll){

        mm.add(breakpoint, () =>{
			ParallaxContainer.parallaxAnimation = gsap.to(targetSelector, {
				scrollTrigger: {
				trigger: triggerSelector,
				start: '0% 100%',
				end: '100% 0%',
				scrub: true,
				},
				scale: scale,
				y: `${yScroll}%`,
				x: `${xScroll}%`
		})
		})
	
	}
}

customElements.define('parallax-container', ParallaxContainer);

{% endjavascript %}

{%- liquid 
    if section.settings.parallax_translate_y > 0
        assign parallax_y_position = 0 | minus: section.settings.parallax_translate_y | append: '%'
    else
        assign parallax_y_position = '0%'
    endif

    if section.settings.parallax_translate_x > 0
        assign parallax_x_position = 0 | minus: section.settings.parallax_translate_x | append: '%'
    else
        assign parallax_x_position = '0%'
    endif

    assign parallax_direction_x = section.settings.parallax_direction_x
    assign parallax_direction_y = section.settings.parallax_direction_y
    assign parallax_scale = section.settings.parallax_scale | divided_by: 100.00
    assign parallax_translate_x = section.settings.parallax_translate_x
    assign parallax_translate_y = section.settings.parallax_translate_y

    assign lazy_load = 'eager'
    assign preload = true
    if section.settings.parallax_lazy == true
    assign lazy_load = 'lazy'
    assign preload = false
    endif
    -%}
    {%- capture parallax_height -%}{{section.settings.parallax_height }}{%- endcapture -%}
{% style %}

#shopify-section-{{ section.id }}.ds-parallax__section {
    width: 100vw;
    overflow-y: hidden;
    height: {{section.settings.parallax_height}}px;
}

.parallax__container {
    display: block;
    overflow: hidden;
    position: relative;
}

#shopify-section-{{ section.id }} .parallax__image {
    object-fit: cover;
    object-position: {{ parallax_x_position }} {{ parallax_y_position }};
    {% if section.settings.parallax_translate_x > 0%}
        min-width: 200vw;
        transform: translateX(-100%);
    {% else %}
        width: 100%;
    {% endif %}
    {% if section.settings.parallax_translate_y > 0 %}
        min-height: {{ section.settings.parallax_height | times: 2 }}px;
        transform: translateY(-100%);
    {% else %}
        height: 100%;
    {% endif %}
}

.parallax__image--desktop {
    display: inline;
}

.parallax__image--mobile {
    display: none;
}

@media screen and (max-width: 749px){
    .parallax__image--desktop {
        display: none;
    }

    .parallax__image--mobile {
        display: inline;
}
}

{% endstyle %}

<parallax-container class="parallax__container"
    data-scale="{{ parallax_scale }}"
    data-x-direction="{{ parallax_direction_x}}"
    data-y-direction="{{ parallax_direction_y }}"
    data-translate-y="{{ parallax_translate_y }}"
    data-translate-x="{{ parallax_translate_x }}"
    id="unique-id-{{section.id}}"
>
    {% if section.settings.parallax_image_desktop != blank %}
    {{ section.settings.parallax_image_desktop | image_url: width: 1920 | image_tag:
    loading: lazy_load,
    preload: preload,
    height: parallax_height,
    sizes: '(max-width: 749px) 200px, (min-width: 750px) 1200px',
    width: 1920,
    class: 'parallax__image parallax__image--desktop' }}
    {% if section.settings.parallax_image_mobile != blank %}
    {{ section.settings.parallax_image_mobile | image_url: width: 1920 | image_tag:
        loading: lazy_load,
        preload: preload,
        height: parallax_height,
        sizes: '(max-width: 749px) 200px, (min-width: 750px) 1200px',
        width: nil,
        class: 'parallax__image parallax__image--mobile' }}
    {% else %}
    {{ section.settings.parallax_image_desktop | image_url: width: 1920 | image_tag:
        loading: lazy_load,
        preload: preload,
        height: parallax_height,
        sizes: '(max-width: 749px) 200px, (min-width: 750px) 1200px',
        width: nil,
        class: 'parallax__image parallax__image--mobile' }}
    {% endif %}
    {% else %}
        {{ 'parallax-image' | placeholder_svg_tag }}
    {% endif %}
</parallax-container>

{% schema %}
{
"name": "DS Parallax",
"tag": "section",
"class": "ds-parallax__section",
"disabled_on": {
    "groups": ["header", "footer"]
},
"settings": [
        {
            "type": "header",
            "content": "DS Parallax"
        },
        {
            "type": "paragraph",
            "content": "This section requires both GSAP Core and GSAP Scroll Trigger turned on in the theme's CMS Settings"
        },
        {
            "type": "header",
            "content": "Image Settings"
        },
        {
            "type": "image_picker",
            "id": "parallax_image_desktop",
            "label": "Select image to parallax on desktop"
        },
        {
            "type": "image_picker",
            "id": "parallax_image_mobile",
            "label": "Select image to parallax on mobile"
        },
        {
            "type": "range",
            "id": "parallax_height",
            "label": "Parallax height",
            "min": 100,
            "max": 1000,
            "step": 50,
            "default": 450
        },
        {
            "type": "checkbox",
            "id": "parallax_lazy",
            "label": "Lazy load parallax image",
            "default": false
        },
        {
            "type": "header",
            "content": "Parallax Settings"
        },
        {
            "type": "select",
            "id": "parallax_direction_x",
            "label": "Horizontal parallax direction",
            "info": "Select whether the parallax moves the image left to right, or vice-versa",
            "options": [
                {
                    "value": "leftToRight",
                    "label": "Left to right"
                },
                {
                    "value": "rightToLeft",
                    "label": "Right to left"
                }
            ]
        },
        {
            "type": "select",
            "id": "parallax_direction_y",
            "label": "Vertical parallax direction",
            "info": "Select whether the parallax moves the image top to bottom, or vice-versa",
            "options": [
                {
                    "value": "topToBottom",
                    "label": "Top to Bottom"
                },
                {
                    "value": "bottomToTop",
                    "label": "Bottom to Top"
                }
            ]
        },
        {
            "type": "range",
            "id": "parallax_scale",
            "label": "Parallax scaling",
            "min": 100,
            "max": 200,
            "step": 5,
            "default": 110,
            "info": "Choose the size of the image after parallax, 100 = no change, 200 = twice as big/2x Zoomed"
        },
        {
            "type": "range",
            "id": "parallax_translate_x",
            "label": "Parallax horizontal movement",
            "min": 0,
            "max": 100,
            "step": 1,
            "default": 40,
            "info": "Choose how far the image moves horizontally during parallax"
        },
        {
            "type": "range",
            "id": "parallax_translate_y",
            "label": "Parallax vertical movement",
            "min": 0,
            "max": 100,
            "step": 1,
            "default": 40,
            "info": "Choose how far the image moves vertically during parallax"
        }
    ],
    "presets": 
        [
            {
                "name": "DS Parallax"
            }
        ]
}
{% endschema %}